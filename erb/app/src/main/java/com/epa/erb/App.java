/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.epa.erb;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.Image;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.IBodyElement;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import com.epa.erb.engagement_action.EngagementActionController;
import com.epa.erb.goal.Goal;
import com.epa.erb.goal.GoalCategory;
import com.epa.erb.indicators.IndicatorCard;
import com.epa.erb.project.Project;
import com.epa.erb.utility.FileHandler;
import com.epa.erb.utility.MainPanelHandler;
import com.epa.erb.utility.XMLManager;

public class App extends Application {

	private int prefWidth;
	private int prefHeight;
	private int popUpPrefWidth;
	private int popUpPrefHeight;
	private Project selectedProject;
	private ArrayList<Project> projects;
	private ArrayList<IndicatorCard> indicatorCards;
	private ERBContainerController erbContainerController;
	private ArrayList<GoalCategory> availableGoalCategories;	
	private ArrayList<ERBContentItem> availableERBContentItems;
	private EngagementActionController engagementActionController;
	private final static Logger logger = new MyLogger(App.class.getName());
	
	public static void main(String[] args) {
		try {
			Application.launch(args);
			logger.log(Level.INFO, "Successfully launched application");
		} catch (Exception e) {
			e.printStackTrace();
			logger.log(Level.SEVERE, "Application cannot launch: " + e.getStackTrace());
		}
	}
	
	@Override
	public void start(Stage primaryStage) throws Exception {
//		readWordDocText();
//		readWordDocTable();
//		readWordParagraph();
		sizeScreen(getScreenResolution(), getScreenSize());
		readAndStoreData();
		showERBToolMain();
	}
	
	public void readWordDocText() {
		System.out.println("----------------TEXT---------------------");

		  String fileName = "C:\\Users\\awilke06\\Documents\\Eclipse_Repos\\MetroCERI\\metroceri_erb\\erb_supporting_docs\\Code_Resources\\ERB\\Static_Data\\Supporting_DOC\\Community_Engagement_Plan.docx";

	        try (XWPFDocument doc = new XWPFDocument(
	                Files.newInputStream(Paths.get(fileName)))) {

	            XWPFWordExtractor xwpfWordExtractor = new XWPFWordExtractor(doc);
	            String docText = xwpfWordExtractor.getText();
	            System.out.println(docText);

	            // find number of words in the document
	            long count = Arrays.stream(docText.split("\\s+")).count();
	            System.out.println("Total words: " + count);

	        } catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

	}
	
	public void readWordDocTable() {
		System.out.println("----------------TABLE---------------------");
		  String fileName = "C:\\Users\\awilke06\\Documents\\Eclipse_Repos\\MetroCERI\\metroceri_erb\\erb_supporting_docs\\Code_Resources\\ERB\\Static_Data\\Supporting_DOC\\Community_Engagement_Plan.docx";

	        try (XWPFDocument doc = new XWPFDocument(
	                Files.newInputStream(Paths.get(fileName)))) {

	            /*XWPFWordExtractor xwpfWordExtractor = new XWPFWordExtractor(doc);
	            String docText = xwpfWordExtractor.getText();
	            System.out.println(docText);*/

	            Iterator<IBodyElement> docElementsIterator = doc.getBodyElementsIterator();

	            //Iterate through the list and check for table element type
	            while (docElementsIterator.hasNext()) {
	                IBodyElement docElement = docElementsIterator.next();
	                if ("TABLE".equalsIgnoreCase(docElement.getElementType().name())) {
	                    //Get List of table and iterate it
	                    List<XWPFTable> xwpfTableList = docElement.getBody().getTables();
	                    for (XWPFTable xwpfTable : xwpfTableList) {
	                        System.out.println("Total Rows : " + xwpfTable.getNumberOfRows());
	                        for (int i = 0; i < xwpfTable.getRows().size(); i++) {
	                            for (int j = 0; j < xwpfTable.getRow(i).getTableCells().size(); j++) {
	                                System.out.println(xwpfTable.getRow(i).getCell(j).getText());
	                            }
	                        }
	                    }
	                }
	            }

	        } catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	public void readWordParagraph() {
		System.out.println("----------------PARAGRAPH---------------------");
		  String fileName = "C:\\Users\\awilke06\\Documents\\Eclipse_Repos\\MetroCERI\\metroceri_erb\\erb_supporting_docs\\Code_Resources\\ERB\\Static_Data\\Supporting_DOC\\Community_Engagement_Plan.docx";

	        try (XWPFDocument doc = new XWPFDocument(
	                Files.newInputStream(Paths.get(fileName)))) {

	            // output the same as 8.1
	            List<XWPFParagraph> list = doc.getParagraphs();
	            for (XWPFParagraph paragraph : list) {
	                System.out.println(paragraph.getText());
	            }

	        } catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	private File getTestLogDir() {
		File erbSupportingDocsDir = new File(System.getProperty("user.dir") + "/.." + "/.." + "/erb_supporting_docs/");
		if (erbSupportingDocsDir.exists()) {
			File logsDir = new File(erbSupportingDocsDir + "/Logs");
			if (!logsDir.exists()) logsDir.mkdir();
			return logsDir;
		}
		return null;
	}
	
	private File getPackagedLogFilePath() {
		File erbDir = new File(System.getProperty("user.dir") + "/lib/ERB");
		if (erbDir.exists()) {
			File logsDir = new File(erbDir + "/Logs");
			if (!logsDir.exists()) logsDir.mkdir();
			return logsDir;
		}
		return null;
	}

	private void showERBToolMain() {
		Parent erbContainerRoot = loadERBContainer();
		launchERBLanding();
		showERBContainer(erbContainerRoot);
	}

	private int getScreenResolution() {
		return java.awt.Toolkit.getDefaultToolkit().getScreenResolution();
	}
	
	private Dimension getScreenSize() {
		return java.awt.Toolkit.getDefaultToolkit().getScreenSize();
	}
	
	private void sizeScreen(int dpiValue, Dimension size) {
		double width = size.getWidth();
		double height = size.getHeight();
		
		int dpiScale = getScaleForDPIValue(dpiValue);
		int maxWidthToSubtract = 650;
		int maxHeightToSubtract = 250;
		int widthToSubtract = maxWidthToSubtract-((maxWidthToSubtract*dpiScale/100)-maxWidthToSubtract);
		int heightToSubtract = maxHeightToSubtract-((maxHeightToSubtract*dpiScale/100)-maxHeightToSubtract);
		
		prefWidth = (int) (width -widthToSubtract);
		prefHeight = (int) (height - heightToSubtract);
		
		int popUpMaxWidthToSubtract = 750;
		int popUpMaxHeightToSubtract = 350;
		int popUpWidthToSubtract = popUpMaxWidthToSubtract-((popUpMaxWidthToSubtract*dpiScale/100)-popUpMaxWidthToSubtract);
		int popUpHeightToSubtract = popUpMaxHeightToSubtract-((popUpMaxHeightToSubtract*dpiScale/100)-popUpMaxHeightToSubtract);
		
		popUpPrefWidth = (int) (width -popUpWidthToSubtract);
		popUpPrefHeight = (int) (height -popUpHeightToSubtract);
	}
	
	public int getScaleForDPIValue(int dpiValue) {
		int lowestDPIValue = 96;
		int lowestDPIScale = 100;
		int highestDPIScale = 500;
		
		for (int i = lowestDPIScale; i <= highestDPIScale; i = i+25) {
			int calculatedDPIValue = (lowestDPIValue * i)/100;
			if(dpiValue == calculatedDPIValue) {
				return i;
			}
		}
		return 100; //Default
	}
	

	public void launchERBLanding() {
		MainPanelHandler mainPanelHandler = new MainPanelHandler(this);
		Parent erbLandingRoot = mainPanelHandler.loadERBLanding(this);
		addNodeToERBContainer(erbLandingRoot);
	}

	private Parent loadERBContainer() {
		try {
			FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/erb/ERBContainer.fxml"));
			erbContainerController = new ERBContainerController(this);
			fxmlLoader.setController(erbContainerController);
			ScrollPane root = fxmlLoader.load();
			root.setPrefWidth(getPrefWidth());
			root.setPrefHeight(getPrefHeight());
			return root;
		} catch (Exception e) {
			logger.log(Level.FINE, "Exception error loading ERBContainer.fxml");
			logger.log(Level.FINER, "Exception error loading ERBContainer.fxml: " + e.getStackTrace());
			return null;
		}
	}

	private Stage erbContainerStage = null;
	private void showERBContainer(Parent erbContainerRoot) {
		if (erbContainerRoot != null) {
			erbContainerStage = new Stage();
			erbContainerStage.getIcons().add(new Image("/bridge_tool_logo.png"));
			Scene scene = new Scene(erbContainerRoot);
			erbContainerStage.setScene(scene);
			erbContainerStage.setOnCloseRequest(e -> erbCloseRequested());
			erbContainerStage.setTitle("ERB: Equitable Resilience Builder");
			erbContainerStage.show();
		} else {
			logger.log(Level.FINE, "Cannot show ERBContainer. Root is null.");
		}
	}

	private void erbCloseRequested() {
		if (engagementActionController != null) {
			FileHandler fileHandler = new FileHandler(this);
			XMLManager xmlManager = new XMLManager(this);
			Project project = engagementActionController.getProject();
			Goal goal = engagementActionController.getCurrentGoal();
			xmlManager.writeGoalMetaXML(fileHandler.getGoalMetaXMLFile(project, goal),engagementActionController.getListOfUniqueERBContentItems());
			fileHandler.createGUIDDirectoriesForGoal2(project, goal, engagementActionController.getListOfUniqueERBContentItems());
		} else {
			logger.log(Level.FINE, "Cannot proccess close request. Controller is null.");
		}
	}

	private void readAndStoreData() {
		readAndStoreAvailableContent();
		readAndStoreAvailableGoalCategories();
		readAndStoreProjects();
	}
	
	private void readAndStoreAvailableContent() {
		System.out.println("THIS: " + this);
		XMLManager xmlManager = new XMLManager(this);
		FileHandler fileHandler = new FileHandler(this);
		File contentFile = fileHandler.getStaticAvailableContentXMLFile();
		availableERBContentItems = xmlManager.parseContentXML(contentFile);
	}
	
	public ERBContentItem findERBContentItemForId(String id) {
		if (id != null) {
			for (ERBContentItem erbContentItem : availableERBContentItems) {
				if (erbContentItem.getId().contentEquals(id)) {
					return erbContentItem;
				}
			}
		}
		logger.log(Level.WARNING, "Null ERBContentItem. Check this.");
		return null;
	}
	
	public IndicatorCard findIndicatorItemForId(String id) {
		if(id != null) {
			for(IndicatorCard indicatorCard: indicatorCards) {
				if(indicatorCard.getId().contentEquals(id)) {
					return indicatorCard;
				}
			}
		}
		logger.log(Level.WARNING, "Null IndicatorItem. Check this.");
		return null;
	}

	private void readAndStoreAvailableGoalCategories() {
		XMLManager xmlManager = new XMLManager(this);
		FileHandler fileHandler = new FileHandler(this);
		File goalCategoriesFile = fileHandler.getStaticGoalCategoriesXMLFile();
		availableGoalCategories = xmlManager.parseGoalCategoriesXML(goalCategoriesFile);
	}

	private void readAndStoreProjects() {
		XMLManager xmlManager = new XMLManager(this);
		FileHandler fileHandler = new FileHandler(this);
		File projectsDirectory = fileHandler.getProjectsDirectory();
		projects = xmlManager.parseAllProjects(projectsDirectory );
	}
	
	public Project getExploreProject() {
		for(Project project: projects) {
			if(project.getProjectName().contentEquals("Explore")) {
				return project;
			}
		}
		logger.log(Level.WARNING, "Null Explore Project. Check this.");
		return null;
	}

	public void addNodeToERBContainer(Node node) {
		if (node != null) {
			setNodeGrowPriority(node, Priority.ALWAYS);
			erbContainerController.getErbContainer().getChildren().clear();
			erbContainerController.getErbContainer().getChildren().add(node);
		} else {
			logger.log(Level.FINE, "Cannot add node to ERBContainer. Node is null.");			
		}
	}

	public void setNodeGrowPriority(Node node, Priority priority) {
		if (node != null) {
			VBox.setVgrow(node, priority);
			HBox.setHgrow(node, priority);
		}
	}

	public void updateAvailableProjectsList() {
		readAndStoreProjects();
	}

	public String generateGUID() {
		return UUID.randomUUID().toString().replaceAll("-", "");
	}

	public int getPrefWidth() {
		return prefWidth;
	}

	public void setPrefWidth(int prefWidth) {
		this.prefWidth = prefWidth;
	}

	public int getPrefHeight() {
		return prefHeight;
	}

	public int getPopUpPrefWidth() {
		return popUpPrefWidth;
	}

	public void setPopUpPrefWidth(int popUpPrefWidth) {
		this.popUpPrefWidth = popUpPrefWidth;
	}

	public int getPopUpPrefHeight() {
		return popUpPrefHeight;
	}

	public void setPopUpPrefHeight(int popUpPrefHeight) {
		this.popUpPrefHeight = popUpPrefHeight;
	}

	public void setPrefHeight(int prefHeight) {
		this.prefHeight = prefHeight;
	}

	public Project getSelectedProject() {
		return selectedProject;
	}

	public void setSelectedProject(Project selectedProject) {
		this.selectedProject = selectedProject;
	}

	public ArrayList<Project> getProjects() {
		return projects;
	}

	public void setProjects(ArrayList<Project> projects) {
		this.projects = projects;
	}

	public ArrayList<GoalCategory> getAvailableGoalCategories() {
		return availableGoalCategories;
	}

	public void setAvailableGoalCategories(ArrayList<GoalCategory> goalCategories) {
		this.availableGoalCategories = goalCategories;
	}

	public ERBContainerController getErbContainerController() {
		return erbContainerController;
	}

	public void setErbContainerController(ERBContainerController erbContainerController) {
		this.erbContainerController = erbContainerController;
	}

	public Stage getErbContainerStage() {
		return erbContainerStage;
	}

	public void setErbContainerStage(Stage erbContainerStage) {
		this.erbContainerStage = erbContainerStage;
	}

	public EngagementActionController getEngagementActionController() {
		return engagementActionController;
	}

	public void setEngagementActionController(EngagementActionController engagementActionController) {
		this.engagementActionController = engagementActionController;
	}

	public ArrayList<ERBContentItem> getAvailableERBContentItems() {
		return availableERBContentItems;
	}

	public ArrayList<IndicatorCard> getIndicatorCards() {
		return indicatorCards;
	}

	public Logger getLogger() {
		return logger;
	}
	

}