/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.epa.erb;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import java.io.File;
import java.util.ArrayList;
import java.util.UUID;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.epa.erb.chapter.Chapter;
import com.epa.erb.engagement_action.EngagementActionController;
import com.epa.erb.goal.Goal;
import com.epa.erb.goal.GoalCategory;
import com.epa.erb.project.Project;
import com.epa.erb.utility.Constants;
import com.epa.erb.utility.FileHandler;
import com.epa.erb.utility.MainPanelHandler;
import com.epa.erb.utility.XMLManager;

public class App extends Application {

	private int prefWidth;
	private int prefHeight;
	private Project selectedProject;
	private ArrayList<Project> projects;
	private Constants constants = new Constants();
	private FileHandler fileHandler = new FileHandler();
	private XMLManager xmlManager = new XMLManager(this);
	private ERBContainerController erbContainerController;
	private Logger logger = LogManager.getLogger(App.class);
	private EngagementActionController engagementActionController;
	
	private ArrayList<Step> availableSteps;
	private ArrayList<Chapter> availableChapters;
	private ArrayList<Activity> availableActivities;
	private ArrayList<GoalCategory> availableGoalCategories;
	private ArrayList<InteractiveActivity> availableDynamicActivities;
	
	@Override
	public void start(Stage primaryStage) throws Exception {
		setScreenSizePreferences(getScreenScale());
		readAndStoreData();
		showERBToolMain();
	}
	
	public static void main(String[] args) {
		Application.launch(args);
	}
	
	private void showERBToolMain() {
		Parent erbContainerRoot = loadERBContainer();
		launchERBLanding();
		showERBContainer(erbContainerRoot);
	}
	
	private int getScreenScale() {
		return java.awt.Toolkit.getDefaultToolkit().getScreenResolution();
	}
	
	private void setScreenSizePreferences(int scale) {
		if(scale > 0 && scale <=96) {
			prefWidth = constants.getPrefWidthForScale100();
			prefHeight = constants.getPrefHeightForScale100();
		} else if (scale > 96 && scale <=125) {
			prefWidth = constants.getPrefWidthForScale125();
			prefHeight = constants.getPrefHeightForScale125();
		} else if (scale > 125 && scale <= 144) {
			prefWidth = constants.getPrefWidthForScale150();
			prefHeight = constants.getPrefHeightForScale150();
		} else {
			prefWidth = constants.getPrefWidthForScale175();
			prefHeight = constants.getPrefHeightForScale175();
		}
	}
	
	public void launchERBLanding() {
		MainPanelHandler mainPanelHandler = new MainPanelHandler();
		Parent erbLandingRoot = mainPanelHandler.loadERBLanding(this);
		loadNodeToERBContainer(erbLandingRoot);
	}
	
	private Parent loadERBContainer() {
		try {
			FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/erb/ERBContainer.fxml"));
			erbContainerController = new ERBContainerController(this);
			fxmlLoader.setController(erbContainerController);
			ScrollPane root = fxmlLoader.load();
			root.setPrefWidth(getPrefWidth());
			root.setPrefHeight(getPrefHeight());
			return root;
		} catch (Exception e) {
			logger.error(e.getMessage());
			return null;
		}
	}
	
	private Stage erbContainerStage = null;
	private void showERBContainer(Parent erbContainerRoot) {
		if (erbContainerRoot != null) {
			erbContainerStage = new Stage();
			Scene scene = new Scene(erbContainerRoot);
			erbContainerStage.setScene(scene);
			erbContainerStage.setOnCloseRequest(e -> erbCloseRequested());
			erbContainerStage.setTitle("ERB: Equitable Resilience Builder");
			erbContainerStage.show();
		} else {
			logger.error("Cannot show ERBContainer. erbContainerRoot is null.");
		}
	}

	private void erbCloseRequested() {
		if(engagementActionController != null) {
			Project project = engagementActionController.getProject();
			Goal goal = engagementActionController.getCurrentGoal();
			ArrayList<Chapter> listOfUniqueChapters = engagementActionController.getListOfUniqueChapters();
			xmlManager.writeGoalMetaXML(fileHandler.getGoalMetaXMLFile(project, goal), listOfUniqueChapters);
			fileHandler.createGUIDDirectoriesForGoal(project, goal, listOfUniqueChapters);
		}
	}	
	
	private void readAndStoreData() {
		readAndStoreAvailableDynamicActivities();
		readAndStoreAvailableSteps();
		readAndStoreAvailableActivities();
		readAndStoreAvailableChapters();
		readAndStoreAvailableGoalCategories();
		readAndStoreProjects();
	}
	
	private void readAndStoreAvailableDynamicActivities() {
		File dynamicActivitiesFile = fileHandler.getStaticAvailableDynamicActivitiesXMLFile();
		availableDynamicActivities = xmlManager.parseAvailableDynamicActivitiesXML(dynamicActivitiesFile);
	}
	
	private void readAndStoreAvailableChapters() {
		File chaptersFile = fileHandler.getStaticChaptersXMLFile();
		availableChapters = xmlManager.parseChaptersXML(chaptersFile);
	}
	
	private void readAndStoreAvailableActivities() {
		File availableActivitiesFile = fileHandler.getStaticAvailableActivitiesXMLFile();
		availableActivities = xmlManager.parseAvailableActivitiesXML(availableActivitiesFile);
	}
	
	private void readAndStoreAvailableSteps() {
		File availableStepsFile = fileHandler.getStaticAvailableStepsXMLFile();
		availableSteps = xmlManager.parseAvailableStepsXML(availableStepsFile);
	}
	
	private void readAndStoreAvailableGoalCategories() {
		File goalCategoriesFile = fileHandler.getStaticGoalCategoriesXMLFile();
		availableGoalCategories = xmlManager.parseGoalCategoriesXML(goalCategoriesFile);
	}
	
	private void readAndStoreProjects() {
		File projectsDirectory = fileHandler.getProjectsDirectory();
		projects = xmlManager.parseAllProjects(projectsDirectory, availableActivities);
	}
	
	public void loadNodeToERBContainer(Node node) {
		if (node != null) {
			setNodeGrowPriority(node, Priority.ALWAYS);
			erbContainerController.getErbContainer().getChildren().clear();
			erbContainerController.getErbContainer().getChildren().add(node);
		} else {
			logger.error("Cannot load node to ERBContainer. node is null.");
		}
	}
	
	public void setNodeGrowPriority(Node node, Priority priority) {
		if (node != null) {
			VBox.setVgrow(node, priority);
			HBox.setHgrow(node, priority);
		}
	}
	
	public void updateAvailableProjectsList() {
		readAndStoreProjects();
	}
	
	public GoalCategory getGoalCategoryByName(String goalCategoryName) {
		if(goalCategoryName != null) {
			for(GoalCategory goalCategory: availableGoalCategories) {
				if(goalCategory.getCategoryName().contentEquals(goalCategoryName)) {
					return goalCategory;
				}
			}
		} else {
			logger.error("Cannot getGoalCategoryByName. goalCategoryName is null.");
			return null;
		}
		logger.debug("Cannot getGoalCategoryByName. GoalCategory returned is null");
		return null;
	}
	
	public InteractiveActivity getDynamicActivityById(String activityID) {
		if (activityID != null) {
			for (InteractiveActivity dynamicActivity : availableDynamicActivities) {
				if (dynamicActivity.getId().contentEquals(activityID)) {
					return dynamicActivity;
				}
			}
		} else {
			logger.error("Cannot getDynamicActivityById. activityID is null.");
			return null;
		}
		logger.debug("Cannot getDynamicActivityById. InteractiveActivity returned is null");
		return null;
	}
	
	public Step getStepByID(String stepID) {
		if (stepID != null) {
			for (Step step : availableSteps) {
				if (step.getStepID().contentEquals(stepID)) {
					return step;
				}
			}
		} else {
			logger.error("Cannot getStepByID. stepID is null.");
			return null;
		}
		logger.debug("Cannot getStepByID. Step returned is null");
		return null;
	}
	
	public Activity getActivityByID(String activityID) {
		if (activityID != null) {
			for (Activity activity : availableActivities) {
				if (activity.getActivityID().contentEquals(activityID)) {
					return activity;
				}
			}
		} else {
			logger.error("Cannot getActivityByID. activityID is null.");
			return null;
		}
		logger.debug("Cannot getActivityByID. Activity returned is null");
		return null;
	}
	
	public Chapter getChapterByID(String chapterID) {
		if(chapterID != null) {
			for(Chapter chapter: availableChapters) {
				if(chapter.getNumericName().contentEquals(chapterID)) {
					return chapter;
				}
			}
		} else {
			logger.error("Cannot getChapterByID. chapterID is null.");
			return null;
		}
		logger.debug("Cannot getChapterByID.Chapter returned is null.");
		return null;
	}
	
	public String generateGUID() {
		return UUID.randomUUID().toString().replaceAll("-", "");
	}

	public int getPrefWidth() {
		return prefWidth;
	}

	public void setPrefWidth(int prefWidth) {
		this.prefWidth = prefWidth;
	}

	public int getPrefHeight() {
		return prefHeight;
	}

	public void setPrefHeight(int prefHeight) {
		this.prefHeight = prefHeight;
	}

	public Project getSelectedProject() {
		return selectedProject;
	}

	public void setSelectedProject(Project selectedProject) {
		this.selectedProject = selectedProject;
	}

	public ArrayList<Project> getProjects() {
		return projects;
	}

	public void setProjects(ArrayList<Project> projects) {
		this.projects = projects;
	}

	public ArrayList<Chapter> getAvailableChapters() {
		return availableChapters;
	}

	public void setAvailableChapters(ArrayList<Chapter> chapters) {
		this.availableChapters = chapters;
	}

	public ArrayList<Activity> getAvailableActivities() {
		return availableActivities;
	}

	public void setAvailableActivities(ArrayList<Activity> activities) {
		this.availableActivities = activities;
	}

	public ArrayList<Step> getAvailableSteps() {
		return availableSteps;
	}

	public void setAvailableSteps(ArrayList<Step> steps) {
		this.availableSteps = steps;
	}

	public ArrayList<InteractiveActivity> getAvailableDynamicActivities() {
		return availableDynamicActivities;
	}

	public void setAvailableDynamicActivities(ArrayList<InteractiveActivity> dynamicActivities) {
		this.availableDynamicActivities = dynamicActivities;
	}

	public ArrayList<GoalCategory> getAvailableGoalCategories() {
		return availableGoalCategories;
	}

	public void setAvailableGoalCategories(ArrayList<GoalCategory> goalCategories) {
		this.availableGoalCategories = goalCategories;
	}

	public ERBContainerController getErbContainerController() {
		return erbContainerController;
	}

	public void setErbContainerController(ERBContainerController erbContainerController) {
		this.erbContainerController = erbContainerController;
	}

	public Stage getErbContainerStage() {
		return erbContainerStage;
	}

	public void setErbContainerStage(Stage erbContainerStage) {
		this.erbContainerStage = erbContainerStage;
	}

	public EngagementActionController getEngagementActionController() {
		return engagementActionController;
	}

	public void setEngagementActionController(EngagementActionController engagementActionController) {
		this.engagementActionController = engagementActionController;
	}

}